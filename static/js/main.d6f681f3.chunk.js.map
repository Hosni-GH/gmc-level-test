{"version":3,"sources":["PostCard.js","posts.js","UserCard.js","users.js","comments.js","App.js","serviceWorker.js","index.js"],"names":["PostCard","props","post","className","src","alt","title","body","to","id","Posts","state","posts","params","this","match","console","log","axios","get","then","res","userPosts","data","filter","el","userId","parseInt","setState","catch","err","map","key","Component","UserCard","user","name","company","catchPhrase","Users","users","Comments","comments","attachedComments","postId","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6f681f3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nconst PostCard = (props) => {\r\n    const { post ={}} = props\r\n\r\nreturn (\r\n    <div className=\"post-card\">\r\n        <div className=\"post-img\">\r\n            <img src=\"https://images.unsplash.com/photo-1476242906366-d8eb64c2f661?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1008&q=80\" alt=\"post-img\"/>\r\n        </div>\r\n        <div  className=\"post-info\">\r\n            <div className=\"post-title\">\r\n                <h3>{post.title}</h3>\r\n            </div>\r\n            <div className=\"post-body\">\r\n                <p>{post.body}</p>\r\n            </div>\r\n            <Link to ={`/comments/${post.id}`}>\r\n                <div className=\"btn-post\">\r\n                    <span>Comments</span>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\nexport default PostCard","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport PostCard from './PostCard'\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n        }\r\n      }\r\n\r\n    componentDidMount(){\r\n        \r\n        const { match: { params } } = this.props;\r\n        console.log('params:: ' + this.props.params)\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => {\r\n            console.log('res: ',res)\r\n            const userPosts=res.data.filter(el => el.userId === parseInt(params.id))\r\n            this.setState({\r\n                posts:userPosts\r\n            })\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"oups! something went wrong!\")\r\n        })\r\n     }\r\n    render() { \r\n        return ( \r\n            <div className=\"posts-list\">\r\n                {\r\n                    this.state.posts.map((el) => {\r\n                        return(\r\n                            <PostCard key={el.id} post={el}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n         );\r\n    }\r\n}\r\nexport default Posts;                                                                                                                                                                                                         ","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nconst UserCard = (props) => {\r\nconst {user = {}} = props\r\nreturn (\r\n    <div className=\"user-card\">\r\n        <div className=\"user-img\">\r\n            <img src=\"https://image.flaticon.com/icons/png/512/180/180644.png\" alt=\"user-avatar\"/>\r\n        </div>\r\n        <div  className=\"user-info\">\r\n            <div className=\"user-name\">\r\n                <h3>{user.name}</h3>\r\n            </div>\r\n            <div className=\"company-name\">\r\n                <p>{user.company.name}</p>\r\n            </div>\r\n            <div className=\"job-description\">\r\n                <p>{user.company.catchPhrase}</p>\r\n            </div>\r\n            <div className=\"btn-flw\">\r\n            <Link to={`/posts/${user.id}`}><span>Following</span></Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\nexport default UserCard","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport UserCard from './UserCard'\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            users: []\r\n         }\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(res =>{\r\n            this.setState({\r\n                users:res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log('Oups! Something went wrong!')\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"users-list\">\r\n                {\r\n                    this.state.users.map(el =>{\r\n                        return(\r\n                            <UserCard user={el} key={el.id}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Users;","import React,{Component} from 'react';\r\nimport axios from 'axios'\r\nclass Comments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { comments:[] }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get('https://jsonplaceholder.typicode.com/comments')\r\n        .then(res => {\r\n            const attachedComments=res.data.filter(el => el.postId === parseInt(params.id))       \r\n            this.setState({\r\n                comments: attachedComments\r\n            })\r\n            console.log('state :', this.state.comments)\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className='listComment'>\r\n                {\r\n                    this.state.comments.map(el =>{\r\n                        return (<div className='comment' key={el.id}>\r\n                                    <h2>{el.name}</h2>\r\n                                    <h5>{el.body}</h5> \r\n                                </div>\r\n                            )\r\n                        })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Comments;\r\n","import React from 'react';\nimport Posts from './posts';\nimport Users from './users';\nimport Comments from './comments'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={Users}/>\n        <Route exact path=\"/posts/:id\" component={Posts}/>\n        <Route  path=\"/comments/:id\" component={Comments}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}